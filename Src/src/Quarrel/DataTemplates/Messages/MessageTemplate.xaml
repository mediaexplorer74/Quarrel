<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:interactivity="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:behaviors="using:Quarrel.Xaml.Behaviors"
    xmlns:markdown="using:Microsoft.Toolkit.Uwp.UI.Controls.Quarrel"
    xmlns:bindables="using:Quarrel.ViewModels.Models.Bindables"
    xmlns:templateSelectors="using:Quarrel.TemplateSelectors"
    xmlns:messagebindables="using:Quarrel.ViewModels.Models.Bindables.Messages"
    xmlns:embedbindables="using:Quarrel.ViewModels.Models.Bindables.Messages.Embeds"
    xmlns:apimodels="using:DiscordAPI.Models"
    xmlns:embedmodels="using:DiscordAPI.Models.Messages.Embeds"
    xmlns:embeds="using:Quarrel.Controls.Messages.Embeds"
    xmlns:members="using:Quarrel.Controls.Members"
    xmlns:messagecontrols="using:Quarrel.Controls.Messages"
    xmlns:messages="using:Quarrel.DataTemplates.Messages"
    xmlns:toolkit="using:Microsoft.Toolkit.Uwp.UI.Controls"
    xmlns:media="using:Microsoft.Xaml.Interactions.Media"
    xmlns:controls="using:Quarrel.Controls"
    xmlns:extensions="using:Microsoft.Toolkit.Uwp.UI.Extensions"
    xmlns:extensions2="using:Microsoft.Toolkit.Uwp.UI.Extensions?IsApiContractPresent(Windows.Foundation.UniversalApiContract,5)"
    xmlns:winui="using:Microsoft.UI.Xaml.Controls"
    xmlns:system="using:System"
    xmlns:messageConverters="using:Quarrel.Converters.Messages"
    xmlns:uniformGrid="using:Quarrel.Controls.UniformGrid"
    xmlns:baseconvert="using:Quarrel.Converters.Base"
    x:Class="Quarrel.DataTemplates.Messages.MessageTemplate">

    <ResourceDictionary.MergedDictionaries>
        <messages:ReactionTemplate/>
        <ResourceDictionary Source="../Converters.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <templateSelectors:AttachmentTemplateSelector x:Key="AttachmentTemplateSelector" 
                                              DefaultAttachmentTemplate="{StaticResource DefaultAttachmentTemplate}"
                                              ImageAttachmentTemplate="{StaticResource ImageAttachmentTemplate}"
                                              VideoAttachmentTemplate="{StaticResource VideoAttachmentTemplate}"/>
    <DataTemplate x:Key="DefaultAttachmentTemplate" x:DataType="embedbindables:BindableAttachment">
        <Grid VerticalAlignment="Top" HorizontalAlignment="Left">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <FontIcon x:Name="FileIcon" FontSize="32" Glyph="" Foreground="{ThemeResource LinkColor}" HorizontalAlignment="Left" Margin="0,0,6,0"/>
            <StackPanel Grid.Column="1">
                <HyperlinkButton Content="{x:Bind Model.Filename}" NavigateUri="{x:Bind Model.ProxyUrl}" FontSize="18" Foreground="{ThemeResource LinkColor}" Padding="0" Style="{StaticResource PlainTextHyperlinkStyle}"/>
                <TextBlock Text="{x:Bind Model.Size, Converter={StaticResource SizeToHumanizedSizeConverter}}" FontSize="11" Opacity="0.5" Margin="0,4,0,0"/>
            </StackPanel>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="ImageAttachmentTemplate" x:DataType="embedbindables:BindableAttachment">
        <Grid HorizontalAlignment="Left">
            <messagecontrols:HiddenAttachment DataContext="{x:Bind}" Visibility="{x:Bind baseconvert:NotBoolToVisibilityConverter.Convert(IsShowing), Mode=OneWay}"/>
            <toolkit:ImageEx x:Name="media" Source="{x:Bind Model.Url}" x:Load="{x:Bind IsShowing, Mode=OneWay}"
                         Height="{x:Bind Model.ActualHeight}" DataContext="{x:Bind}"
                         Width="{x:Bind Model.ActualWidth}"
                         HorizontalAlignment="Left" Tapped="Expand" MaxHeight="250"/>
        </Grid>
    </DataTemplate>
    <DataTemplate x:Key="VideoAttachmentTemplate" x:DataType="embedbindables:BindableAttachment">
        <Grid HorizontalAlignment="Left">
            <messagecontrols:HiddenAttachment DataContext="{x:Bind}" Visibility="{x:Bind baseconvert:NotBoolToVisibilityConverter.Convert(IsShowing), Mode=OneWay}"/>
            <MediaElement x:Name="media" Source="{x:Bind Model.ProxyUrl}" x:Load="{x:Bind IsShowing, Mode=OneWay}"
                      MaxHeight="360" MaxWidth="640"
                      MinHeight="48" MinWidth="100" 
                      Width="{x:Bind Model.ActualWidth}" Height="{x:Bind Model.ActualHeight}" 
                      AreTransportControlsEnabled="True" AutoPlay="False">
                <MediaElement.TransportControls>
                    <MediaTransportControls IsCompact="True" IsZoomButtonVisible="False"/>
                </MediaElement.TransportControls>
            </MediaElement>
        </Grid>
    </DataTemplate>

    <templateSelectors:EmbedTemplateSelector x:Key="EmbedTemplateSelector" 
                                         GifvEmbedTemplate="{StaticResource GifvEmbedTemplate}"
                                         YoutubeEmbedTemplate="{StaticResource YoutubeEmbedTemplate}"
                                         ImageEmbedTemplate="{StaticResource ImageEmbedTemplate}"
                                         RichEmbedTemplate="{StaticResource DefaultEmbedTemplate}"
                                         DefaultEmbedTemplate="{StaticResource DefaultEmbedTemplate}"
                                         InviteTemplate="{StaticResource InviteTemplate}"
                                             />
    <DataTemplate x:Key="GifvEmbedTemplate" x:DataType="embedbindables:BindableEmbed">
        <!---Needs to make sure it does not get clipped horizontally-->
        <MediaElement Source="{x:Bind Model.Video.ProxyUrl}" IsLooping="True"
                      Height="{x:Bind Model.Video.ActualHeight}"
                      MaxHeight="250"
                      Tapped="Expand"
                      HorizontalAlignment="Left"
                      DataContext="{x:Bind}" />
    </DataTemplate>
    <DataTemplate x:Key="YoutubeEmbedTemplate" x:DataType="embedbindables:BindableEmbed">
        <embeds:YoutubeEmbedTemplate DataContext="{x:Bind Model}"
                                     HorizontalAlignment="Left" />
    </DataTemplate>
    <DataTemplate x:Key="ImageEmbedTemplate" x:DataType="embedbindables:BindableEmbed">
        <toolkit:ImageEx Source="{x:Bind Model.Thumbnail.BindUrl}" Width="{x:Bind Model.Thumbnail.Width}" Height="{x:Bind Model.Thumbnail.BindHeight}"
                         DataContext="{x:Bind}" HorizontalAlignment="Left" MaxHeight="250" Tapped="Expand" />
    </DataTemplate>
    <DataTemplate x:Key="DefaultEmbedTemplate" x:DataType="embedbindables:BindableEmbed">
        <Border CornerRadius="4"
                Background="{ThemeResource MidBG}"
                HorizontalAlignment="Left">
            <Grid>
                <Border x:Name="SideBorder" Width="4" HorizontalAlignment="Left" Background="{x:Bind baseconvert:IntColorToBrushConverter.Convert(Model.Color), Mode=OneWay}" CornerRadius="4,0,0,4"/>
                <StackPanel x:Name="stacker" Margin="16,8,16,8">
                    <Grid x:Name="HeaderGrid">
                        <Grid.RowDefinitions>
                            <RowDefinition/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <StackPanel Grid.Row="0" Grid.Column="0" Margin="0,0,16,0" MaxWidth="400">
                            <StackPanel Margin="0,4,0,10"
                                        Orientation="Horizontal"
                                        x:Name="AuthorSP"
                                        x:Load="{x:Bind baseconvert:NotNullToBoolConverter.Convert(Model.Author), Mode=OneWay, FallbackValue=False}">
                                <Border CornerRadius="10"
                                        Margin="0,0,10,0"
                                        x:Name="AuthorRect"
                                        x:Load="{x:Bind baseconvert:NotNullToBoolConverter.ConvertString(Model.Author.IconUrl), Mode=OneWay, FallbackValue=False}">
                                    <toolkit:ImageEx Width="20" Height="20" DecodePixelWidth="20" DecodePixelHeight="20" Source="{x:Bind Model.Author.ProxyIconUrl}"/>
                                </Border>
                                <TextBlock x:Name="AuthorText"
                                           Text="{x:Bind Model.Author.Name}"
                                           x:Load="{x:Bind baseconvert:NotNullToBoolConverter.ConvertString(Model.Author.Name), FallbackValue=False}" FontSize="13" FontWeight="SemiBold" Foreground="{ThemeResource Foreground}"
                                           VerticalAlignment="Center"/>
                            </StackPanel>

                            <TextBlock Text="{x:Bind Model.Title}"
                                       x:Load="{x:Bind baseconvert:NotNullToBoolConverter.ConvertString(Model.Title), Mode=OneWay, FallbackValue=False}"
                                       TextWrapping="WrapWholeWords" x:Name="TitleTB" FontSize="14" FontWeight="SemiBold"/>

                            <markdown:MarkdownTextBlock Text="{x:Bind Model.Description, Mode=OneWay}"
                                                        x:Name="ContentMDBlock"
                                                        x:Load="{x:Bind baseconvert:NotNullToBoolConverter.ConvertString(Model.Description), Mode=OneWay, FallbackValue=False}"
                                                        Opacity="0.75"
                                                        FontSize="13"
                                                        Margin="0,0,0,0" />
                                                    <!--EnableHiddenLinks="True"/>-->
                            <StackPanel x:Name="FieldsStacker">
                                <winui:ItemsRepeater ItemsSource="{x:Bind Model.Fields, Converter={StaticResource EmbedFieldsConverter}}">
                                    <winui:ItemsRepeater.Layout>
                                        <winui:StackLayout DisableVirtualization="True"/>
                                    </winui:ItemsRepeater.Layout>
                                    <winui:ItemsRepeater.ItemTemplate>
                                        <DataTemplate x:DataType="system:Object">
                                            <ItemsControl ItemsSource="{x:Bind}">
                                                <ItemsControl.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <uniformGrid:UniformGrid VerticalAlignment="Top"/>
                                                    </ItemsPanelTemplate>
                                                </ItemsControl.ItemsPanel>
                                                <ItemsControl.ItemTemplate>                                                  
                                                    <DataTemplate x:DataType="embedmodels:EmbedField">
                                                        <StackPanel>
                                                            <TextBlock x:Name="FieldName"
                                                                       TextWrapping="NoWrap"
                                                                       Text="{x:Bind Name}"
                                                                       FontSize="13"
                                                                       FontWeight="SemiBold"
                                                                       x:Load="{x:Bind baseconvert:NotNullToBoolConverter.ConvertString(Name), FallbackValue=False}"/>
                                                            <toolkit:MarkdownTextBlock x:Name="Value"
                                                                                       TextWrapping="Wrap"
                                                                                       Text="{x:Bind baseconvert:MultipleWhiteSpaceCollapseConverter.Convert(Value)}"
                                                                                       FontSize="13"
                                                                                       Opacity="0.75"
                                                                                       x:Load="{x:Bind baseconvert:NotNullToBoolConverter.ConvertString(Value), FallbackValue=False}" />
                                                        </StackPanel>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                            </ItemsControl>
                                        </DataTemplate>
                                    </winui:ItemsRepeater.ItemTemplate>
                                </winui:ItemsRepeater>
                            </StackPanel>
                        </StackPanel>
                        <Grid Grid.Row="0"
                              Grid.Column="1"
                              VerticalAlignment="Top"
                              x:Name="ThumbnailImage"
                              x:Load="{x:Bind baseconvert:NotNullToBoolConverter.Convert(Model.Thumbnail), Mode=OneWay, FallbackValue=False}">
                            <Border CornerRadius="3">
                                <toolkit:ImageEx Source="{x:Bind Model.Thumbnail.ProxyUrl, Mode=OneWay}" DataContext="{x:Bind}" MaxWidth="80" MaxHeight="80" Stretch="Uniform" Tapped="Expand"/>
                            </Border>
                        </Grid>
                    </Grid>
                    <Viewbox HorizontalAlignment="Left"
                             x:Name="ImageVB"
                             x:Load="{x:Bind baseconvert:NotNullToBoolConverter.Convert(Model.Image), FallbackValue=False}" StretchDirection="DownOnly" MaxWidth="400" MaxHeight="250">
                        <toolkit:ImageEx Source="{x:Bind Model.Image.ProxyUrl}" DataContext="{x:Bind}" Tapped="Expand"/>
                    </Viewbox>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <Button Visibility="Collapsed" Style="{StaticResource IntegratedButton}" Grid.Column="1" HorizontalAlignment="Right">
                            <FontIcon Glyph="&#xE72D;" FontFamily="Segoe MDL2 Assets" />
                        </Button>
                    </Grid>
                </StackPanel>
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="InviteTemplate" x:DataType="embedbindables:BindableInvite">
        <Border Background="#55000000" Padding="8,0" CornerRadius="8">
            <messagecontrols:InviteControl DataContext="{x:Bind}"/>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MessageTemplate" x:DataType="messagebindables:BindableMessage">
        <UserControl>
            <UserControl.Resources>
                <Storyboard x:Name="PointerEntered">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MessageButtons" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.35" Value="0.5">
                            <EasingDoubleKeyFrame.EasingFunction>
                                <CircleEase EasingMode="EaseOut"/>
                            </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                    </DoubleAnimationUsingKeyFrames>
                </Storyboard>
                <Storyboard x:Name="PointerExited">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="MessageButtons" Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.35" Value="0">
                            <EasingDoubleKeyFrame.EasingFunction>
                                <CircleEase EasingMode="EaseIn"/>
                            </EasingDoubleKeyFrame.EasingFunction>
                        </EasingDoubleKeyFrame>
                    </DoubleAnimationUsingKeyFrames>
                </Storyboard>
            </UserControl.Resources>
            <RelativePanel x:Name="rootGrid" Margin="0,0,0,2">
                <interactivity:Interaction.Behaviors>
                    <core:EventTriggerBehavior EventName="PointerEntered">
                        <core:EventTriggerBehavior.Actions>
                            <media:ControlStoryboardAction Storyboard="{StaticResource PointerEntered}"/>
                        </core:EventTriggerBehavior.Actions>
                    </core:EventTriggerBehavior>
                    <core:EventTriggerBehavior EventName="PointerExited">
                        <core:EventTriggerBehavior.Actions>
                            <media:ControlStoryboardAction Storyboard="{StaticResource PointerExited}"/>
                        </core:EventTriggerBehavior.Actions>
                    </core:EventTriggerBehavior>
                </interactivity:Interaction.Behaviors>

                <!-- Mention indicator -->
                <Border x:Name="MentionIndic" x:Load="{x:Bind MentionsMe}"
                        Background="#26FFB400" BorderBrush="#7FFFB400" BorderThickness="2,0,0,0" Margin="0,4,0,-4"/>

                <Grid x:Phase="4" x:Name="HeaderGrid" Margin="8,8,0,8"
                      RelativePanel.AlignTopWithPanel="True"
                      RelativePanel.AlignLeftWithPanel="True"
                      RelativePanel.AlignRightWithPanel="True"
                      x:Load="{x:Bind IsOldestUnreadMessage, Mode=OneWay}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition Width="auto"/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>

                    <Rectangle Height="1" Stroke="{ThemeResource SystemControlBackgroundAccentBrush}" Margin="0,0,6,0"/>
                    <TextBlock x:Name="HeaderText" Text="NEW MESSAGES" FontWeight="SemiLight" Grid.Column="1" FontSize="12" Foreground="{ThemeResource SystemControlBackgroundAccentBrush}"/>
                    <Rectangle Height="1" Stroke="{ThemeResource SystemControlBackgroundAccentBrush}" Margin="6,0,0,0" Grid.Column="2"/>
                </Grid>

                <Button x:Name="AuthorIcon"
                        RelativePanel.AlignTopWith="header"
                        Style="{StaticResource DimButton}" Padding="4" Margin="-4,10,-4,-4"
                        extensions2:Mouse.Cursor="Hand"
                        Visibility="{x:Bind baseconvert:NotBoolToVisibilityConverter.Convert(IsContinuation), Mode=OneWay}"
                        Flyout="{StaticResource MemberFlyout}">
                    <controls:UserIconControl Size="40" Width="40" Height="40" DataContext="{x:Bind Author, Mode=OneWay}" ShowPresence="False"/>
                </Button>

                <StackPanel x:Name="header"
                            Margin="52,8,0,2"
                            RelativePanel.Below="HeaderGrid"
                            x:Load="{x:Bind baseconvert:NotBoolToBoolConverter.Convert(IsContinuation), Mode=OneWay}"
                            Orientation="Horizontal">
                    <HyperlinkButton x:Name="AuthorHyperlink"
                                     Style="{StaticResource PlainTextHyperlinkStyle}"
                                     Content="{x:Bind AuthorDisplayName, Mode=OneWay}"
                                     Foreground="{x:Bind baseconvert:IntColorToBrushConverter.Convert(AuthorColor), Mode=OneWay}"
                                     FlyoutBase.AttachedFlyout="{StaticResource MemberFlyout}">
                        <HyperlinkButton.ContextFlyout>
                            <MenuFlyout MenuFlyoutPresenterStyle="{StaticResource DefaultMenuFlyoutPresenterStyle}">
                                <MenuFlyoutItem Text="Profile"
                                                Command="{x:Bind OpenProfile, Mode=OneWay}" />
                                <MenuFlyoutItem Text="Message"
                                                Command="{x:Bind Author.MessageCommand, Mode=OneWay}" />
                                <MenuFlyoutSeparator />
                                <MenuFlyoutItem Text="Change Nickname"
                                                IsEnabled="False" />
                                <MenuFlyoutSeparator />
                                <MenuFlyoutItem Text="Kick Member"
                                                Foreground="{ThemeResource dnd}"
                                                IsEnabled="False" />
                                <MenuFlyoutItem Text="Ban Member"
                                                Foreground="{ThemeResource dnd}"
                                                IsEnabled="False" />
                                <MenuFlyoutSeparator />
                                <MenuFlyoutItem Text="Copy ID"
                                                Command="{x:Bind CopyId, Mode=OneWay}" />
                            </MenuFlyout>
                        </HyperlinkButton.ContextFlyout>
                        <interactivity:Interaction.Behaviors>
                            <core:EventTriggerBehavior EventName="Tapped">
                                <behaviors:OpenFlyoutAction />
                            </core:EventTriggerBehavior>
                        </interactivity:Interaction.Behaviors>
                    </HyperlinkButton>
                    <TextBlock x:Phase="1"
                               Text="{x:Bind baseconvert:DateTimeToTextConverter.Convert(Model.Timestamp), Mode=OneWay}"
                               Margin="4,0,0,2"
                               VerticalAlignment="Bottom"
                               FontSize="11"
                               Opacity="0.3" />
                    <TextBlock x:Phase="1"
                               Text="(Edited"
                               Visibility="{x:Bind Model.EditedTimestamp, Converter={StaticResource NotNullToVisibilityConverter}, Mode=OneWay}"
                               Margin="4,0,0,2"
                               VerticalAlignment="Bottom"
                               FontSize="9"
                               Opacity="0.25" />
                    <TextBlock x:Phase="1"
                               Text="{x:Bind baseconvert:DateTimeToTextConverter.Convert(Model.EditedTimestamp), Mode=OneWay}"
                               Visibility="{x:Bind Model.EditedTimestamp, Converter={StaticResource NotNullToVisibilityConverter}, Mode=OneWay}"
                               Margin="2,0,0,2"
                               VerticalAlignment="Bottom"
                               FontSize="9"
                               Opacity="0.25" />
                    <TextBlock x:Phase="1"
                               Text=") "
                               Visibility="{x:Bind Model.EditedTimestamp, Converter={StaticResource NotNullToVisibilityConverter}, Mode=OneWay}"
                               Margin="0,0,0,2"
                               VerticalAlignment="Bottom"
                               FontSize="9"
                               Opacity="0.25" />
                </StackPanel>

                <Grid x:Name="body"
                      Margin="52,0,0,0"
                      MinHeight="20"
                      RelativePanel.Below="header"
                      RelativePanel.AlignLeftWithPanel="True"
                      RelativePanel.AlignRightWithPanel="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition />
                        <ColumnDefinition Width="auto" />
                    </Grid.ColumnDefinitions>
                    <markdown:MarkdownTextBlock Users="{x:Bind UsersMentioned}"
                                                Roles="{x:Bind RolesMentioned}"
                                                Channels="{x:Bind ChannelsMentioned}"
                                                Text="{x:Bind Model.Content}"
                                                Visibility="{x:Bind baseconvert:NotBoolToVisibilityConverter.Convert(IsEditing), Mode=OneWay}"
                                                TextWrapping="WrapWholeWords"
                                                FontFamily="ms-appx:/Assets/emojifont.ttf#Twitter Color Emoji"
                                                EmojiFontFamily="ms-appx:/Assets/emojifont.ttf#Twitter Color Emoji"
                                                FontWeight="SemiLight"
                                                Opacity="0.9"
                                                LinkClicked="Markdown_LinkClicked"
                                                />
                    <Grid x:Name="EditGrid" x:Load="{x:Bind IsEditing, Mode=OneWay}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto" />
                            <RowDefinition Height="auto" />
                        </Grid.RowDefinitions>
                        <TextBox Style="{StaticResource TextBoxStyle1}"
                                 Text="{x:Bind EditedText, Mode=TwoWay}" />
                        <StackPanel Orientation="Horizontal"
                                    HorizontalAlignment="Right"
                                    Grid.Row="1">
                            <HyperlinkButton Content="Cancel"
                                             Style="{StaticResource PlainTextHyperlinkStyle}"
                                             Margin="8,4"
                                             Command="{x:Bind ToggleEdit, Mode=OneWay}" />
                            <HyperlinkButton Content="Save"
                                             Style="{StaticResource PlainTextHyperlinkStyle}"
                                             Margin="8,4"
                                             Command="{x:Bind SaveEdit, Mode=OneWay}" />
                        </StackPanel>
                    </Grid>
                    <StackPanel x:Name="MessageButtons"
                                Grid.Column="1"
                                Orientation="Horizontal"
                                Opacity="0">
                        <Button x:Name="AddEmojiButton"
                                VerticalAlignment="Top"
                                Padding="4,0"
                                Style="{StaticResource DimButton}"
                                Flyout="{StaticResource EmojiPickerFlyout}">
                            <SymbolIcon Symbol="Emoji" />
                        </Button>
                        <Button x:Name="MoreButton"
                                VerticalAlignment="Top"
                                Padding="4,0"
                                Style="{StaticResource DimButton}">
                            <Button.Flyout>
                                <Flyout FlyoutPresenterStyle="{StaticResource GenericFlyoutStyle}"
                                        Placement="Left">
                                    <messagecontrols:MessageFlyout DataContext="{x:Bind}"
                                                                   Width="96" />
                                </Flyout>
                            </Button.Flyout>

                            <SymbolIcon Symbol="More" />
                        </Button>
                    </StackPanel>
                </Grid>

                <Grid x:Name="AttachmentEmbedList"
                      Margin="52,0,0,0"
                      RelativePanel.Below="body"
                      RelativePanel.AlignLeftWith="body"
                      RelativePanel.AlignRightWithPanel="True">
                    <winui:ItemsRepeater x:Name="AttachmentList"
                                         x:Load="{x:Bind baseconvert:ContainsItemsToBoolConverter.Convert(BindableAttachments), Mode=OneWay}"
                                         ItemsSource="{x:Bind BindableAttachments, Mode=OneWay}"
                                         ItemTemplate="{StaticResource AttachmentTemplateSelector}">
                        <winui:ItemsRepeater.Layout>
                            <winui:StackLayout Spacing="4" DisableVirtualization="True" />
                        </winui:ItemsRepeater.Layout>
                    </winui:ItemsRepeater>
                    <winui:ItemsRepeater x:Name="EmbedList"
                                         x:Load="{x:Bind baseconvert:ContainsItemsToBoolConverter.Convert(Model.Embeds), Mode=OneWay}"
                                         ItemsSource="{x:Bind BindableEmbeds, Mode=OneWay}"
                                         ItemTemplate="{StaticResource EmbedTemplateSelector}">
                        <winui:ItemsRepeater.Layout>
                            <winui:StackLayout Spacing="4" DisableVirtualization="True" />
                        </winui:ItemsRepeater.Layout>
                    </winui:ItemsRepeater>
                </Grid>

                <StackPanel Margin="52,0,0,0"
                            Orientation="Horizontal"
                            RelativePanel.Below="AttachmentEmbedList"
                            RelativePanel.AlignLeftWith="body"
                            Name="ReactionsStackPanel"
                            x:Load="{x:Bind baseconvert:ContainsItemsToBoolConverter.Convert(BindableReactions), Mode=OneWay}">
                    <StackPanel.Resources>
                        <Storyboard x:Name="ReactionsPointerEntered">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AddReactionButton"
                                                           Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.15"
                                                      Value="0.5">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseOut" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <Storyboard x:Name="ReactionsPointerExited">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetName="AddReactionButton"
                                                           Storyboard.TargetProperty="Opacity">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.15"
                                                      Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CircleEase EasingMode="EaseIn" />
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </StackPanel.Resources>
                    <interactivity:Interaction.Behaviors>
                        <core:EventTriggerBehavior EventName="PointerEntered">
                            <core:EventTriggerBehavior.Actions>
                                <media:ControlStoryboardAction Storyboard="{StaticResource ReactionsPointerEntered}" />
                            </core:EventTriggerBehavior.Actions>
                        </core:EventTriggerBehavior>
                        <core:EventTriggerBehavior EventName="PointerExited">
                            <core:EventTriggerBehavior.Actions>
                                <media:ControlStoryboardAction Storyboard="{StaticResource ReactionsPointerExited}" />
                            </core:EventTriggerBehavior.Actions>
                        </core:EventTriggerBehavior>
                    </interactivity:Interaction.Behaviors>
                    <winui:ItemsRepeater x:Name="ReactionList"
                                         ItemsSource="{x:Bind BindableReactions, Mode=OneWay}"
                                         ItemTemplate="{StaticResource Reaction}"
                                         Margin="0,4,0,4">
                        <winui:ItemsRepeater.Layout>
                            <winui:StackLayout Orientation="Horizontal"
                                               Spacing="4"
                                               DisableVirtualization="True" />
                        </winui:ItemsRepeater.Layout>
                    </winui:ItemsRepeater>
                    <Button x:Name="AddReactionButton"
                            VerticalAlignment="Center"
                            Padding="4,0"
                            Style="{StaticResource DimButton}"
                            Flyout="{StaticResource EmojiPickerFlyout}" Opacity="0">
                        <SymbolIcon Symbol="Emoji" />
                    </Button>
                </StackPanel>
            </RelativePanel>
        </UserControl>
    </DataTemplate>
</ResourceDictionary>
